import{_ as n,C as r,c as p,o as c,j as i,a,aA as l,G as s,w as o}from"./chunks/framework.xYj9bmVe.js";const Q=JSON.parse('{"title":"API","description":"","frontmatter":{},"headers":[],"relativePath":"api.md","filePath":"api.md","lastUpdated":null}'),d={name:"api.md"},u={class:"jldocstring custom-block",open:""},h={class:"jldocstring custom-block",open:""},g={class:"jldocstring custom-block",open:""},k={class:"jldocstring custom-block",open:""},m={class:"jldocstring custom-block",open:""},y={class:"jldocstring custom-block",open:""},b={class:"jldocstring custom-block",open:""},f={class:"jldocstring custom-block",open:""},_={class:"jldocstring custom-block",open:""},E={class:"jldocstring custom-block",open:""},v={class:"jldocstring custom-block",open:""},C={class:"jldocstring custom-block",open:""},T={class:"jldocstring custom-block",open:""},j={class:"jldocstring custom-block",open:""},A={class:"jldocstring custom-block",open:""},F={class:"jldocstring custom-block",open:""},M={class:"jldocstring custom-block",open:""},x={class:"jldocstring custom-block",open:""},S={class:"jldocstring custom-block",open:""},R={class:"jldocstring custom-block",open:""},w={class:"jldocstring custom-block",open:""},B={class:"jldocstring custom-block",open:""},D={class:"jldocstring custom-block",open:""},P={class:"jldocstring custom-block",open:""};function V(I,e,z,L,O,N){const t=r("Badge");return c(),p("div",null,[e[96]||(e[96]=i("h1",{id:"API",tabindex:"-1"},[a("API "),i("a",{class:"header-anchor",href:"#API","aria-label":'Permalink to "API {#API}"'},"​")],-1)),i("details",u,[i("summary",null,[e[0]||(e[0]=i("a",{id:"Microclimate.McCulloughPorterSolarGeometry",href:"#Microclimate.McCulloughPorterSolarGeometry"},[i("span",{class:"jlbinding"},"Microclimate.McCulloughPorterSolarGeometry")],-1)),e[1]||(e[1]=a()),s(t,{type:"info",class:"jlObjectType jlType",text:"Type"})]),e[3]||(e[3]=l('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">solar_geometry</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(d</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Real</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, latitude</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Quantity</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, h</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Quantity</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; d0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Real</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 80</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, ω</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Real</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2π</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">365</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, ϵ</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Real</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.0167</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, se</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Real</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.39779</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Computes key solar geometry parameters based on McCullough &amp; Porter (1971):</p><ul><li><p><code>ζ</code>: Auxiliary solar longitude (radians)</p></li><li><p><code>δ</code>: Solar declination (radians)</p></li><li><p><code>z</code>: Solar zenith angle (radians)</p></li><li><p><code>AR2</code>: Square of Earth-to-Sun radius factor (unitless)</p></li></ul><p><strong>Arguments</strong></p><ul><li><p><code>d</code>: Day of year (1–365)</p></li><li><p><code>latitude</code>: Latitude (with angle units, e.g. <code>u&quot;°&quot;</code> or <code>u&quot;rad&quot;</code>)</p></li><li><p><code>h</code>: Hour angle (radians)</p></li><li><p><code>d0</code>: Reference day (default: 80)</p></li><li><p><code>ω</code>: Angular frequency of Earth’s orbit (default: <code>2π/365</code>)</p></li><li><p><code>ϵ</code>: Orbital eccentricity (default: <code>0.0167</code>)</p></li><li><p><code>se</code>: Constant for solar declination amplitude (default: <code>0.39779</code>)</p></li></ul><p><strong>Returns</strong></p><p>Tuple: <code>(ζ, δ, z, AR2)</code> with angle quantities in radians and AR2 unitless.</p><p><strong>Reference</strong></p><p>McCullough &amp; Porter (1971)</p>',9)),s(t,{type:"info",class:"source-link",text:"source"},{default:o(()=>[...e[2]||(e[2]=[i("a",{href:"https://github.com/BiophysicalEcology/Microclimate.jl/blob/bb3180b50926140a0cdc066b961eb69788c62874/src/radiation.jl#L47-L72",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",h,[i("summary",null,[e[4]||(e[4]=i("a",{id:"Microclimate.MicroProblem",href:"#Microclimate.MicroProblem"},[i("span",{class:"jlbinding"},"Microclimate.MicroProblem")],-1)),e[5]||(e[5]=a()),s(t,{type:"info",class:"jlObjectType jlType",text:"Type"})]),e[7]||(e[7]=l('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">MicroProblem</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Simulates soil and microclimate dynamics over multiple days.</p><p><strong>Overview generated by ChatGPT</strong></p><ul><li><p>Interpolates daily min/max weather (temperature, wind, humidity, cloud) to hourly steps.</p></li><li><p>Solves the soil energy balance using an ODE each hour.</p></li><li><p>Optionally simulates soil moisture (<code>runmoist=true</code>).</p></li><li><p>Returns detailed outputs for soil, air, radiation, and water balance.</p></li></ul><p><strong>Hourly Weather Interpolation</strong></p><ul><li><p>Daily min/max values are interpolated to 24-hour vectors (e.g. <code>TAIRs</code>).</p></li><li><p>Matches the Fortran/R approach where an extra hour smooths interpolation.</p></li></ul><p><strong>Soil Layer Setup</strong></p><ul><li><p><code>numnodes_a</code>: number of nodes for temperature output.</p></li><li><p><code>numnodes_b</code>: expanded nodes for moisture (<code>numnodes_a * 2 - 2</code>).</p></li><li><p>Initializes temperature (<code>θ_soil0_a</code>) and moisture (<code>θ_soil0_b</code>).</p></li><li><p>Tracks water phase transitions in <code>Σphase</code>.</p></li></ul><p><strong>Solar Radiation</strong></p><ul><li><p><code>solrad</code> computes clear-sky radiation.</p></li><li><p>Zenith angles capped at 90°.</p></li><li><p>Clouds adjust radiation with <code>cloud_adjust_radiation</code>.</p></li></ul><p><strong>Time Loop</strong></p><ul><li><p>Outer loop: days.</p></li><li><p>Inner loop: hours.</p></li><li><p>Supports spin-up or multi-iteration (<code>iterate_day</code>).</p></li><li><p>Each hour:</p><ul><li><p><code>soil_energy_balance!</code> updates temperature.</p></li><li><p><code>get_soil_water_balance</code> updates moisture (optional).</p></li><li><p>Soil properties (<code>bulk_thermal_conductivity</code>, <code>bulk_heat_capacity</code>, <code>bulk_density</code>) updated.</p></li><li><p>Sky temperature computed with <code>longwave_radiation</code>.</p></li></ul></li></ul><p><strong>Profiles</strong></p><ul><li><p>After all days, computes air, wind, humidity profiles via <code>atmospheric_surface_profile</code>.</p></li><li><p>Results are &quot;flipped&quot; into vectors with <code>flip2vectors</code>.</p></li></ul><p><strong>Return Values</strong></p><p>Returns a named tuple containing:</p><ul><li><p>Air/wind/RH profiles</p></li><li><p>Cloud cover and solar radiation</p></li><li><p>Soil temperature, moisture, water potential, RH</p></li><li><p>Soil thermal properties and bulk density</p></li><li><p>Surface water pools</p></li><li><p><code>solrad_out</code> and <code>profile_out</code> for detailed internals</p></li></ul><p><strong>Notes</strong></p><ul><li><p><strong>Units</strong>: Uses <code>Unitful.jl</code>. Ensure all functions preserve units.</p></li><li><p><strong>Memory</strong>: Large arrays (<code>T_soils</code>, <code>θ_soils</code>):verbose set showmode? may be heavy for long runs.</p></li><li><p><strong>Interpolation</strong>: Extra 25th hour is correct but needs careful indexing.</p></li><li><p><strong>Phase tranitions</strong>: Applied hourly; check <code>Σphase</code> across multi-day runs.</p></li><li><p><strong>Moisture logic</strong>: Updates depend on <code>i == 1</code> or <code>i &lt; length(hours)</code>; confirm matches Fortran/R logic.</p></li></ul>',19)),s(t,{type:"info",class:"source-link",text:"source"},{default:o(()=>[...e[6]||(e[6]=[i("a",{href:"https://github.com/BiophysicalEcology/Microclimate.jl/blob/bb3180b50926140a0cdc066b961eb69788c62874/src/simulation.jl#L1-L66",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",g,[i("summary",null,[e[8]||(e[8]=i("a",{id:"Microclimate.SolarRadiation",href:"#Microclimate.SolarRadiation"},[i("span",{class:"jlbinding"},"Microclimate.SolarRadiation")],-1)),e[9]||(e[9]=a()),s(t,{type:"info",class:"jlObjectType jlType",text:"Type"})]),e[11]||(e[11]=l('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">SolarRadiation</span></span></code></pre></div><p><strong>TODO who wrote this model what is it called</strong></p><p><strong>Keyword Arguments</strong></p><ul><li><p><code>cmH2O::Real=1</code>: Precipitable water in cm for atmospheric column (e.g. 0.1: dry, 1.0: moist, 2.0: humid).</p></li><li><p><code>ϵ::Real=0.0167238</code>: Orbital eccentricity of Earth.</p></li><li><p><code>ω::Real=2π/365</code>: Mean angular orbital velocity of Earth (radians/day).</p></li><li><p><code>se::Real=0.39779</code>: Precomputed solar elevation constant.</p></li><li><p><code>d0::Real=80</code>: Reference day for declination calculations.</p></li><li><p><code>iuv::Bool=false</code>: If <code>true</code>, uses the full gamma-function model for diffuse radiation (expensive).</p></li><li><p><code>scattered::Bool=true</code>: If <code>true</code>, disables scattered light computations (faster).</p></li><li><p><code>amr::Quantity=25.0u&quot;km&quot;</code>: Mixing ratio height of the atmosphere.</p></li><li><p><code>nmax::Integer=111</code>: Maximum number of wavelength intervals.</p></li><li><p><code>Iλ::Vector{Quantity}</code>: Vector of wavelength bins (e.g. in <code>nm</code>).</p></li><li><p><code>OZ::Matrix{Float64}</code>: Ozone column depth table indexed by latitude band and month (size 19×12).</p></li><li><p><code>τR</code>, <code>τO</code>, <code>τA</code>, <code>τW</code>: Vectors of optical depths per wavelength for Rayleigh scattering, ozone, aerosols, and water vapor.</p></li><li><p><code>Sλ::Vector{Quantity}</code>: Solar spectral irradiance per wavelength bin (e.g. in <code>mW * cm^-2 * nm^-1</code>).</p></li><li><p><code>FD</code>, <code>FDQ</code>: Radiation scattered from the direct solar beam and reflected radiation rescattered downward as a function of wavelength, from tables in Dave &amp; Furukawa (1966).</p></li><li><p><code>s̄</code>: a function of τR linked to molecular scattering in the UV range (&lt; 360 nm)</p></li></ul>',4)),s(t,{type:"info",class:"source-link",text:"source"},{default:o(()=>[...e[10]||(e[10]=[i("a",{href:"https://github.com/BiophysicalEcology/Microclimate.jl/blob/bb3180b50926140a0cdc066b961eb69788c62874/src/landscape.jl#L168-L191",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",k,[i("summary",null,[e[12]||(e[12]=i("a",{id:"Microclimate.atmospheric_surface_profile-Tuple{}",href:"#Microclimate.atmospheric_surface_profile-Tuple{}"},[i("span",{class:"jlbinding"},"Microclimate.atmospheric_surface_profile")],-1)),e[13]||(e[13]=a()),s(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[15]||(e[15]=l(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">atmospheric_surface_profile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(; kwargs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Compute vertical profiles of wind speed, air temperature, and relative humidity in the atmospheric surface layer, using Monin–Obukhov similarity theory (MOST).</p><p>This function reproduces the subroutine in <code>MICRO.f/get_profile.R</code> from <strong>NicheMapR</strong>, ported to Julia. It calculates the microclimate profiles above the ground (or canopy) at specified heights, based on measured values at a reference height and computed or measured soil surface temperature, together with surface roughness parameters. Zenith angle and a maximum allowed surface temperature are used to assess whether conditions are stable or unstable.</p><p><strong>Keyword Arguments</strong></p><ul><li><p><code>z0::Quantity=0.004u&quot;m&quot;</code>: roughness length (surface aerodynamic roughness).</p></li><li><p><code>zh::Quantity=0.0u&quot;m&quot;</code>: heat transfer roughness height</p></li><li><p><code>d0::Quantity=0.0u&quot;m&quot;</code>: zero plane displacement correction factor.</p></li><li><p><code>karman_constant::Float64=0.4</code>: von Kármán constant.</p></li><li><p><code>heights::Vector{Quantity}</code>: Requested heights above the surface, the last being the reference height.</p></li><li><p><code>reference_temperature::Quantity=27.78u&quot;°C&quot;</code>: Air temperature at the reference height.</p></li><li><p><code>reference_wind_speed::Quantity=2.75u&quot;m/s&quot;</code>: Wind speed at the reference height.</p></li><li><p><code>relative_humidity::Float64=49.0</code>: Relative humidity at the reference height (%).</p></li><li><p><code>surface_temperature::Quantity=48.59u&quot;°C&quot;</code>: Soil or surface temperature.</p></li><li><p><code>zenith_angle::Quantity=21.5u&quot;°&quot;</code>: Solar zenith angle.</p></li><li><p><code>elevation::Quantity=0.0u&quot;m&quot;</code>: Elevation above sea level.</p></li></ul><p><strong>Returns</strong></p><p>Named tuple with fields:</p><ul><li><p><code>wind_speed</code>: Wind speed profile at each height (<code>cm/min</code> internally, returned in SI units).</p></li><li><p><code>air_temperature</code>: Air temperature profile at each height (<code>K</code>).</p></li><li><p><code>relative_humidity</code>: Relative humidity (%) at each height.</p></li><li><p><code>Q_convection</code>: Convective heat flux (<code>W/m²</code>).</p></li><li><p><code>ustar</code>: Friction velocity (<code>m/s</code>).</p></li></ul><p><strong>Notes</strong></p><ul><li><p>Stability corrections use the <strong>Businger–Dyer</strong> formulations for unstable conditions.</p></li><li><p>The Monin–Obukhov length is estimated iteratively through <code>calc_Obukhov_length</code>.</p></li><li><p>Two broad options for aerodynamic roughness calculations are available: Campbell &amp; Norman&#39;s (1998) approach</p></li></ul><p>that handles canopy displacement, invoked if <code>zh &gt; 0</code> and otherwise</p><ul><li><p>When <code>zh &gt; 0</code>, canopy displacement is considered in the profile calculation.</p></li><li><p>zh and d0 for Campbell and Norman air temperature/wind speed profile (0.6 * canopy height in m if unknown</p></li></ul><table tabindex="0"><thead><tr><th style="text-align:right;">Condition</th><th style="text-align:right;">Wind profile</th><th style="text-align:right;">Temperature profile</th></tr></thead><tbody><tr><td style="text-align:right;"><code>zh &gt; 0</code> + neutral/hot</td><td style="text-align:right;">log-law</td><td style="text-align:right;">log between <code>z</code> and <code>zh</code></td></tr><tr><td style="text-align:right;"><code>zh &gt; 0</code> + unstable/stable</td><td style="text-align:right;">log-law with <code>calc_ψ_m</code> correction</td><td style="text-align:right;">log with displacement/<code>zh</code></td></tr><tr><td style="text-align:right;"><code>zh == 0</code> + neutral/hot</td><td style="text-align:right;">log-law</td><td style="text-align:right;">weighted by bulk/sublayer Stanton numbers</td></tr><tr><td style="text-align:right;"><code>zh == 0</code> + unstable/stable</td><td style="text-align:right;">log-law with <code>calc_ψ_m</code> correction</td><td style="text-align:right;">full Monin–Obukhov profile via <code>calc_Obukhov_length</code></td></tr></tbody></table><ul><li>Relative humidity profiles are estimated from vapor pressure at each height.</li></ul><p><strong>References</strong></p><ul><li><p>Businger, J. A., Wyngaard, J. C., Izumi, Y., &amp; Bradley, E. F. (1971). Flux–profile relationships in the atmospheric surface layer. <em>Journal of the Atmospheric Sciences</em>, 28(2), 181–189.</p></li><li><p>Dyer, A. J. (1974). A review of flux–profile relationships. <em>Boundary-Layer Meteorology</em>, 7(3), 363–372.</p></li><li><p>Kearney, M. R., et al. (2020). NicheMapR: an R package for microclimate and biophysical modeling. <em>Ecography</em>, 43, 1–14.</p></li></ul><p><strong>Example</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">profile </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> atmospheric_surface_profile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    reference_temperature </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 25</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">u</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;°C&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    reference_wind_speed </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2.0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">u</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;m/s&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    relative_humidity </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 60.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    surface_temperature </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 35</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">u</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;°C&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    zenith_angle </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 45</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">u</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;°&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">profile</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">air_temperature  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># vertical profile of air temperatures</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">profile</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">wind_speed       </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># vertical profile of wind speeds</span></span></code></pre></div>`,18)),s(t,{type:"info",class:"source-link",text:"source"},{default:o(()=>[...e[14]||(e[14]=[i("a",{href:"https://github.com/BiophysicalEcology/Microclimate.jl/blob/bb3180b50926140a0cdc066b961eb69788c62874/src/boundary_layer.jl#L11-L84",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",m,[i("summary",null,[e[16]||(e[16]=i("a",{id:"Microclimate.bulk_stanton-Tuple{Any, Any, Any}",href:"#Microclimate.bulk_stanton-Tuple{Any, Any, Any}"},[i("span",{class:"jlbinding"},"Microclimate.bulk_stanton")],-1)),e[17]||(e[17]=a()),s(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[19]||(e[19]=l('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">bulk_stanton</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(log_z_ratio, z, L_Obukhov)</span></span></code></pre></div><p>Compute the bulk Stanton number for unstable conditions.</p>',2)),s(t,{type:"info",class:"source-link",text:"source"},{default:o(()=>[...e[18]||(e[18]=[i("a",{href:"https://github.com/BiophysicalEcology/Microclimate.jl/blob/bb3180b50926140a0cdc066b961eb69788c62874/src/boundary_layer.jl#L332-L336",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",y,[i("summary",null,[e[20]||(e[20]=i("a",{id:"Microclimate.bulk_stanton-Tuple{Any}",href:"#Microclimate.bulk_stanton-Tuple{Any}"},[i("span",{class:"jlbinding"},"Microclimate.bulk_stanton")],-1)),e[21]||(e[21]=a()),s(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[23]||(e[23]=l('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">bulk_stanton</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(log_z_ratio)</span></span></code></pre></div><p>Compute the bulk Stanton number for stable conditions.</p>',2)),s(t,{type:"info",class:"source-link",text:"source"},{default:o(()=>[...e[22]||(e[22]=[i("a",{href:"https://github.com/BiophysicalEcology/Microclimate.jl/blob/bb3180b50926140a0cdc066b961eb69788c62874/src/boundary_layer.jl#L323-L327",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",b,[i("summary",null,[e[24]||(e[24]=i("a",{id:"Microclimate.calc_Obukhov_length-NTuple{10, Any}",href:"#Microclimate.calc_Obukhov_length-NTuple{10, Any}"},[i("span",{class:"jlbinding"},"Microclimate.calc_Obukhov_length")],-1)),e[25]||(e[25]=a()),s(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[27]||(e[27]=l(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">calc_Obukhov_length</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(T_ref_height, T_surface, v_ref_height, z, z0, ρcpTκg, κ, log_z_ratio, ΔT, ρ_cp, </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                     γ</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">16.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, max_iter</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">500</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, tol</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1e-2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Iteratively solve for Monin-Obukhov length and convective heat flux.</p>`,2)),s(t,{type:"info",class:"source-link",text:"source"},{default:o(()=>[...e[26]||(e[26]=[i("a",{href:"https://github.com/BiophysicalEcology/Microclimate.jl/blob/bb3180b50926140a0cdc066b961eb69788c62874/src/boundary_layer.jl#L422-L427",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",f,[i("summary",null,[e[28]||(e[28]=i("a",{id:"Microclimate.calc_convection-Tuple{}",href:"#Microclimate.calc_convection-Tuple{}"},[i("span",{class:"jlbinding"},"Microclimate.calc_convection")],-1)),e[29]||(e[29]=a()),s(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[31]||(e[31]=l('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">calc_convection</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(; u_star, log_z_ratio, ΔT, ρ_cp, z0)</span></span></code></pre></div><p>Calculate the convective heat flux (sensible heat exchange between surface and air).</p><p><strong>Arguments</strong></p><ul><li><p><code>u_star::Quantity{&lt;:Real,𝐋/𝐓}</code>: Friction velocity (e.g. <code>m/s</code>, <code>cm/min</code>).</p></li><li><p><code>log_z_ratio::Real</code>: Precomputed logarithmic height ratio, typically <code>log(z/z0 + 1.0)</code>.</p></li><li><p><code>ΔT::Quantity{&lt;:Real,Θ}</code>: Temperature difference between reference air and surface (Kelvin).</p></li><li><p><code>ρ_cp::Quantity{&lt;:Real,(𝐌*𝐋^-1*𝐓^-2)}</code>: Volumetric heat capacity of air (e.g. <code>J/m³/K</code>, <code>cal/cm³/K</code>).</p></li><li><p><code>z0::Quantity{&lt;:Real,𝐋}</code>: Surface roughness length (length).</p></li></ul><p><strong>Returns</strong></p><ul><li>Convective heat flux as <code>Quantity{&lt;:Real,(𝐌*𝐓^-3)}</code> (e.g. <code>W/m²</code>, <code>cal/min/cm²</code>).</li></ul><p>Uses bulk and sublayer Stanton numbers to account for turbulence near the surface.</p><p><strong>See also</strong></p><p><a href="/Microclimate.jl/previews/PR55/api#Microclimate.calc_u_star-Tuple{}"><code>calc_u_star</code></a>, <a href="/Microclimate.jl/previews/PR55/api#Microclimate.calc_wind-NTuple{5, Any}"><code>calc_wind</code></a>, <a href="/Microclimate.jl/previews/PR55/api#Microclimate.sublayer_stanton-Tuple{Any, Any}"><code>sublayer_stanton</code></a>, <a href="/Microclimate.jl/previews/PR55/api#Microclimate.bulk_stanton-Tuple{Any, Any, Any}"><code>bulk_stanton</code></a>, <a href="/Microclimate.jl/previews/PR55/api#Microclimate.convective_flux-NTuple{5, Any}"><code>convective_flux</code></a></p>',9)),s(t,{type:"info",class:"source-link",text:"source"},{default:o(()=>[...e[30]||(e[30]=[i("a",{href:"https://github.com/BiophysicalEcology/Microclimate.jl/blob/bb3180b50926140a0cdc066b961eb69788c62874/src/boundary_layer.jl#L278-L297",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",_,[i("summary",null,[e[32]||(e[32]=i("a",{id:"Microclimate.calc_u_star-Tuple{}",href:"#Microclimate.calc_u_star-Tuple{}"},[i("span",{class:"jlbinding"},"Microclimate.calc_u_star")],-1)),e[33]||(e[33]=a()),s(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[35]||(e[35]=l('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">calc_u_star</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(; reference_wind_speed, log_z_ratio, κ</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Compute the friction velocity (u*) from a reference wind speed using the logarithmic wind profile.</p><p><strong>Arguments</strong></p><ul><li><p><code>reference_wind_speed::Quantity{&lt;:Real,𝐋/𝐓}</code>: Wind speed at the reference height (e.g. <code>m/s</code>, <code>cm/min</code>).</p></li><li><p><code>log_z_ratio::Real</code>: Precomputed log height ratio, typically <code>log(z/z0 + 1.0)</code>.</p></li><li><p><code>κ::Real</code>: von Kármán constant (default = 0.4).</p></li></ul><p><strong>Returns</strong></p><ul><li>Friction velocity <code>u_star::Quantity{&lt;:Real,𝐋/𝐓}</code>.</li></ul><p><strong>See also</strong></p><p><a href="/Microclimate.jl/previews/PR55/api#Microclimate.calc_convection-Tuple{}"><code>calc_convection</code></a>, <a href="/Microclimate.jl/previews/PR55/api#Microclimate.calc_wind-NTuple{5, Any}"><code>calc_wind</code></a></p>',8)),s(t,{type:"info",class:"source-link",text:"source"},{default:o(()=>[...e[34]||(e[34]=[i("a",{href:"https://github.com/BiophysicalEcology/Microclimate.jl/blob/bb3180b50926140a0cdc066b961eb69788c62874/src/boundary_layer.jl#L233-L249",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",E,[i("summary",null,[e[36]||(e[36]=i("a",{id:"Microclimate.calc_wind-NTuple{5, Any}",href:"#Microclimate.calc_wind-NTuple{5, Any}"},[i("span",{class:"jlbinding"},"Microclimate.calc_wind")],-1)),e[37]||(e[37]=a()),s(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[39]||(e[39]=l('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">calc_wind</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(z, z0, κ, u_star, b)</span></span></code></pre></div><p>Calculate wind speed at height <code>z</code> using the logarithmic wind profile.</p><p><strong>Arguments</strong></p><ul><li><p><code>z::Quantity{&lt;:Real,𝐋}</code>: Height above the surface (e.g. <code>m</code>, <code>cm</code>).</p></li><li><p><code>z0::Quantity{&lt;:Real,𝐋}</code>: Roughness length (e.g. <code>m</code>, <code>cm</code>).</p></li><li><p><code>κ::Real</code>: von Kármán constant.</p></li><li><p><code>u_star::Quantity{&lt;:Real,𝐋/𝐓}</code>: Friction velocity.</p></li><li><p><code>b::Real</code>: Offset term (e.g. <code>1.0</code> for neutral stability, or stability correction).</p></li></ul><p><strong>Returns</strong></p><ul><li>Wind speed at height <code>z::Quantity{&lt;:Real,𝐋/𝐓}</code>.</li></ul><p><strong>See also</strong></p><p><a href="/Microclimate.jl/previews/PR55/api#Microclimate.calc_u_star-Tuple{}"><code>calc_u_star</code></a>, <a href="/Microclimate.jl/previews/PR55/api#Microclimate.calc_convection-Tuple{}"><code>calc_convection</code></a></p>',8)),s(t,{type:"info",class:"source-link",text:"source"},{default:o(()=>[...e[38]||(e[38]=[i("a",{href:"https://github.com/BiophysicalEcology/Microclimate.jl/blob/bb3180b50926140a0cdc066b961eb69788c62874/src/boundary_layer.jl#L255-L272",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",v,[i("summary",null,[e[40]||(e[40]=i("a",{id:"Microclimate.calc_ρ_cp-NTuple{4, Any}",href:"#Microclimate.calc_ρ_cp-NTuple{4, Any}"},[i("span",{class:"jlbinding"},"Microclimate.calc_ρ_cp")],-1)),e[41]||(e[41]=a()),s(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[43]||(e[43]=l('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">calc_ρ_cp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(T_mean, elevation, relative_humidity)</span></span></code></pre></div><p>Compute the volumetric heat capacity of moist air (ρ·cₚ) given temperature, elevation, and relative humidity.</p><p><strong>Arguments</strong></p><ul><li><p><code>T_mean</code>: Mean air temperature (<code>Unitful.Temperature</code>), in Kelvin.</p></li><li><p><code>elevation</code>: Elevation above sea level (with units of length).</p></li><li><p><code>relative_humidity</code>: Relative humidity (fraction between 0 and 1).</p></li></ul><p><strong>Returns</strong></p><ul><li>Volumetric heat capacity (<code>cal / (cm³·K)</code>).</li></ul><p>Uses <code>dry_air_properties</code> to compute air density (ρ) and <code>wet_air_properties</code> to compute specific heat capacity (cₚ).</p>',7)),s(t,{type:"info",class:"source-link",text:"source"},{default:o(()=>[...e[42]||(e[42]=[i("a",{href:"https://github.com/BiophysicalEcology/Microclimate.jl/blob/bb3180b50926140a0cdc066b961eb69788c62874/src/boundary_layer.jl#L208-L224",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",C,[i("summary",null,[e[44]||(e[44]=i("a",{id:"Microclimate.calc_ρ_cp-Tuple{Any}",href:"#Microclimate.calc_ρ_cp-Tuple{Any}"},[i("span",{class:"jlbinding"},"Microclimate.calc_ρ_cp")],-1)),e[45]||(e[45]=a()),s(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[47]||(e[47]=l('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">calc_ρ_cp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(T_mean)</span></span></code></pre></div><p>Compute the volumetric heat capacity of air (ρ·cₚ) as a function of mean temperature.</p><p><strong>Arguments</strong></p><ul><li><code>T_mean</code>: Mean air temperature (<code>Unitful.Temperature</code>), in Kelvin.</li></ul><p><strong>Returns</strong></p><ul><li>Volumetric heat capacity (<code>cal / (cm³·K)</code>).</li></ul><p>This is a simplified empirical regression based only on temperature, without accounting for moisture or elevation effects.</p>',7)),s(t,{type:"info",class:"source-link",text:"source"},{default:o(()=>[...e[46]||(e[46]=[i("a",{href:"https://github.com/BiophysicalEcology/Microclimate.jl/blob/bb3180b50926140a0cdc066b961eb69788c62874/src/boundary_layer.jl#L190-L203",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",T,[i("summary",null,[e[48]||(e[48]=i("a",{id:"Microclimate.calc_φ_m-Tuple{Any, Any, Any}",href:"#Microclimate.calc_φ_m-Tuple{Any, Any, Any}"},[i("span",{class:"jlbinding"},"Microclimate.calc_φ_m")],-1)),e[49]||(e[49]=a()),s(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[51]||(e[51]=l('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">calc_φ_m</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(z, γ, L_Obukhov)</span></span></code></pre></div><p>Stability correction function φ for momentum in Monin–Obukhov similarity theory (MOST).</p><p><strong>Arguments</strong></p><ul><li><p><code>z</code>: Height above surface (with units of length).</p></li><li><p><code>γ</code>: Empirical constant (dimensionless, often ≈16).</p></li><li><p><code>L_Obukhov</code>: Monin–Obukhov length (with units of length).</p></li></ul><p><strong>Returns</strong></p><ul><li>Dimensionless stability correction factor φ.</li></ul><p>This corresponds to the Businger–Dyer formulation for unstable stratification:</p><p>φₘ = (1 - γ z / L)^(1/4)</p><p><strong>References</strong></p><ul><li><p>Businger, J. A., Wyngaard, J. C., Izumi, Y., &amp; Bradley, E. F. (1971). Flux–profile relationships in the atmospheric surface layer. <em>Journal of the Atmospheric Sciences</em>, 28(2), 181–189.</p></li><li><p>Dyer, A. J. (1974). A review of flux–profile relationships. <em>Boundary-Layer Meteorology</em>, 7(3), 363–372.</p></li></ul>',10)),s(t,{type:"info",class:"source-link",text:"source"},{default:o(()=>[...e[50]||(e[50]=[i("a",{href:"https://github.com/BiophysicalEcology/Microclimate.jl/blob/bb3180b50926140a0cdc066b961eb69788c62874/src/boundary_layer.jl#L342-L365",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",j,[i("summary",null,[e[52]||(e[52]=i("a",{id:"Microclimate.calc_ψ_h-Tuple{Any}",href:"#Microclimate.calc_ψ_h-Tuple{Any}"},[i("span",{class:"jlbinding"},"Microclimate.calc_ψ_h")],-1)),e[53]||(e[53]=a()),s(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[55]||(e[55]=l('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">calc_ψ_h</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x)</span></span></code></pre></div><p>Stability correction function ψ_h for heat and moisture under unstable conditions, used in Monin–Obukhov similarity theory.</p><p><strong>Arguments</strong></p><ul><li><code>x</code>: Dimensionless argument, typically <code>(1 - γ z / L)^(1/4)</code>.</li></ul><p><strong>Returns</strong></p><ul><li>Correction factor ψ_h (dimensionless).</li></ul><p>This is the Businger–Dyer form for scalars:</p><p>ψ_h(x) = 2 ln((1 + x²) / 2)</p><p><strong>References</strong></p><ul><li><p>Businger et al. (1971).</p></li><li><p>Dyer (1974).</p></li></ul>',10)),s(t,{type:"info",class:"source-link",text:"source"},{default:o(()=>[...e[54]||(e[54]=[i("a",{href:"https://github.com/BiophysicalEcology/Microclimate.jl/blob/bb3180b50926140a0cdc066b961eb69788c62874/src/boundary_layer.jl#L397-L416",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",A,[i("summary",null,[e[56]||(e[56]=i("a",{id:"Microclimate.calc_ψ_m-Tuple{Any}",href:"#Microclimate.calc_ψ_m-Tuple{Any}"},[i("span",{class:"jlbinding"},"Microclimate.calc_ψ_m")],-1)),e[57]||(e[57]=a()),s(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[59]||(e[59]=l('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">calc_ψ_m</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x)</span></span></code></pre></div><p>Stability correction function ψₘ for momentum under unstable atmospheric stratification, used in Monin–Obukhov similarity theory.</p><p><strong>Arguments</strong></p><ul><li><code>x</code>: Dimensionless argument, typically <code>(1 - γ z / L)^(1/4)</code>.</li></ul><p><strong>Returns</strong></p><ul><li>Correction factor ψₘ (dimensionless).</li></ul><p>This is the Businger–Dyer form for momentum:</p><p>ψₘ(x) = 2 ln((1 + x) / 2) + ln((1 + x²) / 2) - 2 atan(x) + π/2</p><p><strong>References</strong></p><ul><li><p>Businger et al. (1971).</p></li><li><p>Dyer (1974).</p></li></ul>',10)),s(t,{type:"info",class:"source-link",text:"source"},{default:o(()=>[...e[58]||(e[58]=[i("a",{href:"https://github.com/BiophysicalEcology/Microclimate.jl/blob/bb3180b50926140a0cdc066b961eb69788c62874/src/boundary_layer.jl#L372-L391",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",F,[i("summary",null,[e[60]||(e[60]=i("a",{id:"Microclimate.cloud_adjust_radiation!-Tuple{Any, AbstractArray, Any, Any, AbstractArray, Any}",href:"#Microclimate.cloud_adjust_radiation!-Tuple{Any, AbstractArray, Any, Any, AbstractArray, Any}"},[i("span",{class:"jlbinding"},"Microclimate.cloud_adjust_radiation!")],-1)),e[61]||(e[61]=a()),s(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[63]||(e[63]=l('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cloud_adjust_radiation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(cloud, D_cs, B_cs, zenith, doy; a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.25</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, b</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, gamma</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Compute global (G), diffuse (D), and direct-beam (B) solar on a horizontal surface given cloud cover fraction <code>cloud</code> (0–1), clear-sky diffuse <code>D_cs</code> and direct <code>B_cs</code>, solar zenith angle <code>zenith</code> (radians), and day-of-year <code>doy</code>.</p><ul><li><p>Ångström scaling: G = (a + b*S) * (D_cs + B_cs), with S ≈ (1 - cloud)^gamma</p></li><li><p>Diffuse fraction via Erbs (uses extraterrestrial horizontal irradiance) via a clearness index (Maxwwell 1987) which is the ratio of global to extraterrestrial irradiance on a horizontal plane</p></li></ul><p>Returns <code>(G, D, B)</code>; works with arrays but needs to not use &#39;similar&#39; if to work with scalars.</p><p>Reference Maxwell, E. L., &quot;A Quasi-Physical Model for Converting Hourly Global Horizontal to Direct Normal Insolation&quot;, Technical Report No. SERI/TR-215-3087, Golden, CO: Solar Energy Research Institute, 1987.</p>',5)),s(t,{type:"info",class:"source-link",text:"source"},{default:o(()=>[...e[62]||(e[62]=[i("a",{href:"https://github.com/BiophysicalEcology/Microclimate.jl/blob/bb3180b50926140a0cdc066b961eb69788c62874/src/radiation.jl#L1621-L1641",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",M,[i("summary",null,[e[64]||(e[64]=i("a",{id:"Microclimate.convective_flux-NTuple{5, Any}",href:"#Microclimate.convective_flux-NTuple{5, Any}"},[i("span",{class:"jlbinding"},"Microclimate.convective_flux")],-1)),e[65]||(e[65]=a()),s(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[67]||(e[67]=l('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">convective_flux</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ρ_cp, ΔT, u_star, St_bulk, St_sublayer)</span></span></code></pre></div><p>Compute convective heat flux given bulk and sublayer Stanton numbers.</p>',2)),s(t,{type:"info",class:"source-link",text:"source"},{default:o(()=>[...e[66]||(e[66]=[i("a",{href:"https://github.com/BiophysicalEcology/Microclimate.jl/blob/bb3180b50926140a0cdc066b961eb69788c62874/src/boundary_layer.jl#L304-L308",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",x,[i("summary",null,[e[68]||(e[68]=i("a",{id:"Microclimate.dchxy-Tuple{Float64, Vector{Float64}, Int64}",href:"#Microclimate.dchxy-Tuple{Float64, Vector{Float64}, Int64}"},[i("span",{class:"jlbinding"},"Microclimate.dchxy")],-1)),e[69]||(e[69]=a()),s(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[71]||(e[71]=l('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">dchxy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(TAU1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Float64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, CFA</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Vector{Float64}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, NCASE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    -&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (CHX</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Vector{Float64}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, CHY</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Vector{Float64}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, nomitr</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Compute Chandrasekhar&#39;s X and Y functions for radiative transfer.</p><p><strong>Description</strong></p><p>This routine evaluates the X- and Y-functions of Chandrasekhar using double precision arithmetic. The method starts with the fourth approximation given in Sec. 59 of Chandrasekhar’s <em>Radiative Transfer</em> (Dover Publications, 1960), and iteratively refines the values according to the procedure in Sec. 60. Iteration terminates when successive corrected values of the Y-function agree to four significant figures.</p><p><strong>Inputs</strong></p><ul><li><p><code>TAU1::Float64</code>: Normal optical thickness of the atmosphere. Must be ≤ 2.0.</p></li><li><p><code>CFA::NTuple{3,Float64}</code>: Coefficients of the characteristic function in polynomial form: ```math C(μ) = Σⱼ Aⱼ * μ^(2(j-1)), j = 1,2,3</p></li></ul><p>Outputs</p><p>CHX::Vector{Float64} Values of the X-function at 101 evenly spaced μ values from 0.00 to 1.00 in steps of 0.01.</p><p>CHY::Vector{Float64} Values of the Y-function at the same μ grid.</p><p>nomitr::Int Number of iterations performed before convergence.</p><p>Notes</p><p>If ncase != 0, a conservative case is assumed and a standard solution is returned. The program terminates with an error if:</p><ul><li><p>tau1 &gt; 2.0</p></li><li><p>the characteristic function is negative for any μ</p></li><li><p>the integral of the characteristic function exceeds 0.5</p></li></ul><p>References</p><p><a href="https://en.wikipedia.org/wiki/Chandrasekhar%27s_X-_and_Y-function" target="_blank" rel="noreferrer">https://en.wikipedia.org/wiki/Chandrasekhar&#39;s_X-_and_Y-function</a></p><p>McCullough, E. C., &amp; Porter, W. P. (1971). Computing clear day solar radiation spectra for the terrestrial ecological environment. Ecology, 52(6), 1008–1015. <a href="https://doi.org/10.2307/1933806" target="_blank" rel="noreferrer">https://doi.org/10.2307/1933806</a></p>',16)),s(t,{type:"info",class:"source-link",text:"source"},{default:o(()=>[...e[70]||(e[70]=[i("a",{href:"https://github.com/BiophysicalEcology/Microclimate.jl/blob/bb3180b50926140a0cdc066b961eb69788c62874/src/radiation.jl#L591-L643",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",S,[i("summary",null,[e[72]||(e[72]=i("a",{id:"Microclimate.elevation_correction-Tuple{Any}",href:"#Microclimate.elevation_correction-Tuple{Any}"},[i("span",{class:"jlbinding"},"Microclimate.elevation_correction")],-1)),e[73]||(e[73]=a()),s(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[75]||(e[75]=l('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">elevation_correction</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(elevation)</span></span></code></pre></div><p>Calculates smooth polynomial approximations of atmospheric constituent correction factors as a function of elevation (based on Kearney&#39;s modification of the ALTFCT array originally from SOLAR.DAT). Input <code>elevation</code> is the elevation in meters and can include units.</p><p><strong>Description</strong></p><p>The array <code>ELEVFCT(i, j)</code> represents the <strong>ratio of the total amount of a given atmospheric constituent (index j) above the elevation of interest (index i) to that above sea level</strong>. The constituent indices are:</p><ul><li><p>j = 1: Molecular</p></li><li><p>j = 2: Aerosol</p></li><li><p>j = 3: Ozone</p></li><li><p>j = 4: Water vapor</p></li></ul><p>For j = 1–3, values are derived from standard profiles. For water vapor (j = 4), no standard profile exists, so only <code>ELEVFCT(1, 4)</code> is defined as 1.00.</p><p>The elevation index i runs from 1 to 21, corresponding to elevations from sea level to 20 km in 1 km steps.</p><p>This function implements fitted polynomials to reproduce this correction smoothly from <code>elevation</code> (in meters) using continuous approximation.</p><p><strong>Returns</strong></p><p>A <code>NamedTuple</code> with the fields:</p><ul><li><p><code>molecular_corr</code></p></li><li><p><code>aerosol_corr</code></p></li><li><p><code>ozone_corr</code></p></li><li><p><code>water_vapor_corr</code></p></li></ul>',11)),s(t,{type:"info",class:"source-link",text:"source"},{default:o(()=>[...e[74]||(e[74]=[i("a",{href:"https://github.com/BiophysicalEcology/Microclimate.jl/blob/bb3180b50926140a0cdc066b961eb69788c62874/src/radiation.jl#L97-L132",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",R,[i("summary",null,[e[76]||(e[76]=i("a",{id:"Microclimate.hour_angle",href:"#Microclimate.hour_angle"},[i("span",{class:"jlbinding"},"Microclimate.hour_angle")],-1)),e[77]||(e[77]=a()),s(t,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),e[79]||(e[79]=l('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">hour_angle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(t</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Quantity</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, longitude_correction</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Quantity</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Quantity</span></span></code></pre></div><p>Compute the solar hour angle <code>h</code> in radians.</p><p><strong>Arguments</strong></p><ul><li><p><code>t</code>: Local solar hour (e.g., <code>14.0</code>)</p></li><li><p><code>longitude_correction</code>: Longitude correction in hours (e.g., <code>0.5</code>)</p></li></ul><p><strong>Returns</strong></p><ul><li><p>Hour angle <code>h</code> as a <code>Quantity</code> in radians</p></li><li><p>Time at solar noon, <code>tsn</code> as a time in hours</p></li></ul><p><strong>Reference</strong></p><p>McCullough &amp; Porter 1971, Eq. 6</p>',8)),s(t,{type:"info",class:"source-link",text:"source"},{default:o(()=>[...e[78]||(e[78]=[i("a",{href:"https://github.com/BiophysicalEcology/Microclimate.jl/blob/bb3180b50926140a0cdc066b961eb69788c62874/src/radiation.jl#L22-L38",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",w,[i("summary",null,[e[80]||(e[80]=i("a",{id:"Microclimate.soil_properties!-Tuple{NamedTuple, Any}",href:"#Microclimate.soil_properties!-Tuple{NamedTuple, Any}"},[i("span",{class:"jlbinding"},"Microclimate.soil_properties!")],-1)),e[81]||(e[81]=a()),s(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[83]||(e[83]=l('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">soil_props_vector!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(buffers, soil_thermal; terrain, soil_temperature, soil_moisture)</span></span></code></pre></div><p>Compute soil properties for vectors of soil temperature and moisture using broadcasting.</p><p><strong>TODO these should have readable names</strong></p><p>Returns three arrays: <code>λ_b</code>, <code>cp_b</code>, <code>ρ_b</code>.</p>',4)),s(t,{type:"info",class:"source-link",text:"source"},{default:o(()=>[...e[82]||(e[82]=[i("a",{href:"https://github.com/BiophysicalEcology/Microclimate.jl/blob/bb3180b50926140a0cdc066b961eb69788c62874/src/soil_properties.jl#L141-L148",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",B,[i("summary",null,[e[84]||(e[84]=i("a",{id:"Microclimate.soil_properties-Tuple{CampbelldeVriesSoilThermal}",href:"#Microclimate.soil_properties-Tuple{CampbelldeVriesSoilThermal}"},[i("span",{class:"jlbinding"},"Microclimate.soil_properties")],-1)),e[85]||(e[85]=a()),s(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[87]||(e[87]=l('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">soil_properties</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(soil_thermal; soil_temperature, soil_moisture, terrain)</span></span></code></pre></div><p>Compute bulk soil properties — thermal conductivity (<code>λ_b</code>), volumetric heat capacity (<code>cp_b</code>), and bulk density (<code>ρ_b</code>) — for a given soil layer.</p><p><strong>Arguments</strong></p><ul><li><code>soil_thermal::AbstractSoilThermalModel</code></li></ul><p><strong>Keywords</strong></p><ul><li><p><code>terrain</code></p></li><li><p><code>soil_temperature::Quantity</code>: Soil temperature in Kelvin.</p></li><li><p><code>soil_moisture::Real</code>: Volumetric soil moisture (m³/m³).</p></li></ul><p><strong>Returns</strong></p><p>A named tuple <code>(λ_b, cp_b, ρ_b)</code>:</p><ul><li><p><code>λ_b::Quantity</code>: Bulk thermal conductivity (W/m/K)</p></li><li><p><code>cp_b::Quantity</code>: Bulk volumetric heat capacity (J/kg/K)</p></li><li><p><code>ρ_b::Quantity</code>: Bulk density (kg/m³)</p></li></ul><p><strong>Theory</strong></p><p>This function calculates soil thermal properties using the Campbell &amp; Norman (1991, 1994) approach, which accounts for:</p><ol><li><p><strong>Soil composition</strong>: Soil is modeled as a mixture of mineral, water, and air fractions. Each fraction contributes to bulk properties depending on its volumetric fraction.</p></li><li><p><strong>Water content effects</strong>: The function includes a water recirculation factor (<code>f_water</code>) to model how moisture affects heat transfer.</p></li><li><p><strong>Phase-dependent conductivity</strong>: Effective thermal conductivity of soil (<code>λ_b</code>) is computed using a generalization of de Vries’ mixing model, considering interactions between mineral, liquid, and gas components.</p></li><li><p><strong>Temperature dependence</strong>: Thermal conductivity of water and air are adjusted with temperature.</p></li><li><p><strong>Vapor transport</strong>: Small contribution from vapor diffusion is included via a finite-difference approximation of saturated vapor pressure (<code>∇x</code>).</p></li></ol><p>This method provides an accurate representation of heat transfer in variably wet soils for land surface or microclimate modeling.</p><p><strong>References</strong></p><p>Campbell, G. S., Jungbauer, J. D. Jr., Bidlake, W. R., &amp; Hungerford, R. D. (1994). Predicting the effect of temperature on soil thermal conductivity. Soil Science, 158(5), 307–313.</p><p>Campbell, G. S., &amp; Norman, J. M. (1998). Environmental Biophysics. Springer.</p>',16)),s(t,{type:"info",class:"source-link",text:"source"},{default:o(()=>[...e[86]||(e[86]=[i("a",{href:"https://github.com/BiophysicalEcology/Microclimate.jl/blob/bb3180b50926140a0cdc066b961eb69788c62874/src/soil_properties.jl#L1-L54",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",D,[i("summary",null,[e[88]||(e[88]=i("a",{id:"Microclimate.solrad-Tuple{SolarRadiation}",href:"#Microclimate.solrad-Tuple{SolarRadiation}"},[i("span",{class:"jlbinding"},"Microclimate.solrad")],-1)),e[89]||(e[89]=a()),s(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[91]||(e[91]=l('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">solrad</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(solar_radiaion_model; kw</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Compute clear sky solar radiation at a given place and time using a detailed atmospheric radiative transfer model.</p><p><strong>Arguments</strong></p><ul><li><code>solar_radiaion_model</code>:</li></ul><p><strong>Keyword Arguments</strong></p><ul><li><p><code>days::Vector{Float64}</code>: Days of the year (1–365/366) to evaluate.</p></li><li><p><code>hours::Vector{Float64}</code>: Decimal hours of the day (0.0–23.0).</p></li><li><p><code>latitude::Quantity</code>: Latitude in degrees, e.g. <code>43.0u&quot;°&quot;</code>.</p></li><li><p><code>longitude_correction::Real=0.0</code>: Longitude correction in hours (positive west of standard meridian).</p></li><li><p><code>year::Real</code>: Year used for ozone table lookup.</p></li><li><p><code>terrain</code></p></li><li><p><code>albedo::Vector{&lt;:Real}=fill(0.15, length(days))</code>: Daily ground albedo, fraction [0, 1].</p></li></ul><p><strong>Returns</strong></p><p>A named tuple containing:</p><ul><li><p><code>λ::Vector</code>: Wavelengths (typically in µm).</p></li><li><p><code>λDirect::Vector</code>: Spectral direct irradiance [W/m²/µm].</p></li><li><p><code>λRayleigh::Vector</code>: Spectral Rayleigh-scattered irradiance [W/m²/µm].</p></li><li><p><code>λScattered::Vector</code>: Spectral diffuse (scattered) irradiance [W/m²/µm].</p></li><li><p><code>λGlobal::Vector</code>: Spectral global irradiance (direct + diffuse) [W/m²/µm].</p></li><li><p><code>Direct::Float64</code>: Broadband direct irradiance [W/m²].</p></li><li><p><code>Rayleigh::Float64</code>: Broadband Rayleigh-scattered irradiance [W/m²].</p></li><li><p><code>Scattered::Float64</code>: Broadband scattered (diffuse) irradiance [W/m²].</p></li><li><p><code>Global::Float64</code>: Broadband global irradiance (direct + diffuse) [W/m²].</p></li><li><p><code>Zenith::Float64</code>: Solar zenith angle [degrees].</p></li><li><p><code>ZenithSlope::Float64</code>: Slope solar zenith angle [degrees].</p></li><li><p><code>Azimuth::Float64</code>: Solar azimuth angle [degrees].</p></li><li><p><code>doy::Int</code>: Day of year.</p></li><li><p><code>hour::Float64</code>: Decimal hour of day.</p></li></ul><p><strong>Notes</strong></p><ul><li><p>Radiation units are returned in <code>W/m²</code>. Internally, units like <code>mW/cm²</code> are used and converted as necessary using <code>Unitful.jl</code>.</p></li><li><p>Topographic shading is included via the <code>horizon_angles</code> input (horizon angle mask) but cloud effects on scattered solar should be added later.</p></li><li><p>Outputs are computed for each (day, hour) combination in the input vectors.</p></li><li><p>In optical air mass &#39;arims&#39; calculation the difference between apparent and true zenith angle is neglected for z less than 88 degrees</p></li><li><p>Variation of airms with altitude is ignored since it is negligible up to at least 6 km above sea level</p></li></ul><p><strong>References</strong></p><p>FD and FDQ derived from tables in Dave and Furukawa (1967) Dave, J. V., &amp; Furukawa, P. M. (1966). Scattered radiation in the ozone absorption bands at selected levels of a terrestrial, Rayleigh atmosphere (Vol. 7). Americal Meteorological Society.</p>',13)),s(t,{type:"info",class:"source-link",text:"source"},{default:o(()=>[...e[90]||(e[90]=[i("a",{href:"https://github.com/BiophysicalEcology/Microclimate.jl/blob/bb3180b50926140a0cdc066b961eb69788c62874/src/radiation.jl#L1177-L1229",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",P,[i("summary",null,[e[92]||(e[92]=i("a",{id:"Microclimate.sublayer_stanton-Tuple{Any, Any}",href:"#Microclimate.sublayer_stanton-Tuple{Any, Any}"},[i("span",{class:"jlbinding"},"Microclimate.sublayer_stanton")],-1)),e[93]||(e[93]=a()),s(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[95]||(e[95]=l('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">sublayer_stanton</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(z0, u_star)</span></span></code></pre></div><p>Compute the Stanton number for the viscous sublayer.</p>',2)),s(t,{type:"info",class:"source-link",text:"source"},{default:o(()=>[...e[94]||(e[94]=[i("a",{href:"https://github.com/BiophysicalEcology/Microclimate.jl/blob/bb3180b50926140a0cdc066b961eb69788c62874/src/boundary_layer.jl#L314-L318",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})])])}const W=n(d,[["render",V]]);export{Q as __pageData,W as default};
